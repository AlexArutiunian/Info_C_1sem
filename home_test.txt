//Задача 1. Плоскость, раскрашенная в шахматном порядке.
#include <stdio.h>
int main()
{
    double x, y;
    scanf("(%lg;%lg)", &x, &y);
    
    int a = (int)(x / 2) + (int)(y / 2);  // вычисляем, сколько клеток было до той, которой удовлетворяют введённые координаты x и y.
                                          // если ровно по одной из координат кол-во клеток нечетное, то клетка, в которой находимся - белая.
    if(a % 2)                             // приведение типов (double -> int) для определения (целого) количества клеток до искомой
    printf("White");                      // операция "/" - для целых чисел - делит число и отбрасывает дробную часть. Например, (3 / 2) = 1
    else
    printf("Black");
    
    return 0;
}
//Задача 2, 3. Функция подсчета Периметра четырехугольника. Использование ее в программе:
//Вводятся 4 координаты вершин в следующем порядке: 1) левая нижняя; 2) левая верхняя; 3) правая нижняя; 4) правая верхняя. 

#include <stdio.h>
#include <math.h>

struct Point
{
    double x, y;
};

struct Quad
{
    struct Point left_bot; 
    struct Point left_top;
    struct Point right_bot, right_top;
};
int Perimeter(struct Quad X) 
{ 
    double x1 = X.left_bot.x;
    double y1 = X.left_bot.y;
    
    double x2 = X.left_top.x;
    double y2 = X.left_top.y;
    
    double x3 = X.right_bot.x;
    double y3 = X.right_bot.y;
    
    double x4 = X.right_top.x;
    double y4 = X.right_top.y;
    
    double a = sqrtf((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2)); // считаем все стороны фигуры по формулам расстояния между двумя точками на координатной плоскости
    double b = sqrtf((x1 - x3)*(x1 - x3) + (y1 - y3)*(y1 - y3));
    double c = sqrtf((x4 - x2)*(x4 - x2) + (y4 - y2)*(y4 - y2));
    double d = sqrtf((x4 - x3)*(x4 - x3) + (y3 - y4)*(y3 - y4));
    
    double p = a + b + c + d;
    printf("Perimeter = %lg", p);
    return 0;
}

int main()
{
    struct Quad X;
   // printf("left bottom:");
    scanf("(%lg;%lg) ", &(X.left_bot.x), &(X.left_bot.y));
   // printf("left top:");
    scanf("(%lg;%lg) ", &(X.left_top.x), &(X.left_top.y));
   // printf("right bot:");
    scanf("(%lg;%lg) ", &(X.right_bot.x), &(X.right_bot.y));
   // printf("right top:");
    scanf("(%lg;%lg)", &(X.right_top.x), &(X.right_top.y));
    
    Perimeter(X);
    
    return 0;
}

//Задача 4. Использование функции strlen(). С ее помощью определяется кол-во введенных символов в строку.
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int N;
    scanf("%d", &N);

    char *s = (char *)malloc(sizeof(char)*(N + 1)); // выделим память на N + 1 ячейку для учета \0
    s[N] = '\0';
    scanf("%s", s);
    printf("%zd\n", strlen(s)); // спецификатор для strlen() %zd нашел в книге Прата. Так же можно использовать %lu
    free(s);
}
//Задача 5. Делимость огромного числа на 3 и 8. Вывод сообщения об ошибке при вводе не числового символа.
#include <stdio.h>
int div3()
{
    int c = 0;
    unsigned long long int s = 0;
    c = getchar();
    while(c != '\n')
    {
        s = s + (c - '0');
        c = getchar();
        if(((c < '0') || (c > '9')) && (c != '\n'))
        {
            printf("ERROR");
            return 0;
        }
    }
    if ((s % 3) == 0)
        printf("YES");
    else
        printf("NO");
}

int div8()
{
    int a, b, c, d = 0;
    
    d = getchar();
    while(d != '\n')
    {
        
        a = b;           // находим последние 3 цифры числа. изначально число в программе выглядит так 000x / abcd. Где х - введенный первый символ. потом 00xy / abcd
        b = c;          // где у - второй введенный символ. затем 0xyz / abcd. потом xyzf / abcd. и так 4 числа переходят одно в другое справва налево
        c = d;           // в конце когда при вводе в переменную d встречается энтер, то цикл завершается и в переменных a, b, c записаны соответственно 3 последние цифры
        d = getchar();
        if(((d < '0') || (d > '9')) && (d != '\n'))
        {
            printf("ERROR");
            return 0;
        }
    }
    int a1 = a - '0';
    int b1 = b - '0';
    int c1 = c - '0';
    if ((a1 % 2) && (b1 % 2) && (c1 % 2))
        printf("not DIV");
    else
        printf("DIV");
    return 0;
}
int main()
{
    int d;
    printf("Проверка делимости на (3 или 8): ");
    scanf("%d\n", &d);
    if(d == 3)
        div3();
    if(d == 8)
        div8();
    return 0;
    
}
//Задача 6. Printf. Введенное число переводится в 16ричную систему с помощью спецификатора в ф-ии printf().
#include <stdio.h>

int main()
{
    int x = 0;
    scanf("%d", &x);
    printf("%X\n", x);
    float a = 1.6;
    float b = 0.4;
    printf("%f\n", a * b);

    double c = 1.024;
    double d = 0.256;

    printf("%04.2f\n", (c - d));
    printf("%.2f\n", (c - d));
    printf("000%.2f", (c - d));

    return 0;
}
//Задача 7. Ввод матрицы 3х3. Вывод транспонированной матрицы
#include <stdio.h>

int main()
{
    int m[3][3];
    int i, k = 0;
    for(i = 0; i < 3; i++)
    {
        for(k = 0; k < 3; k ++)
        {
            scanf("%d", &m[i][k]);
        }
    }
    printf("\n");
    for(k = 0; k < 3; k++)
    {
        for(i = 0; i < 3; i ++)
        {
            printf("%d ", m[i][k]);
        }
        printf("\n");
    }
    return 0;
}
//Задача 8. Динамический двумерный массив. (Создание с помощью динамического одномерного массива указателей)
//Поворот на 90 градусов по часовой.

#include <stdio.h>
#include <stdlib.h>
int main()
{
    int n, m;
    scanf("%d %d", &n, &m);
    int **A = 0;                                        // Выделение памяти для двумерного массива
    A = (int **)malloc(sizeof(int*) * n);               // создаём массив из указателей. Он отвечает за кол. строк 
    for(int i = 0; i < n; i++)                          // в массиве хранятся указатели -> умножаем на их размер
        A[i] = (int*)malloc(sizeof(int) * m);           // уже для каждого указателя из массива указателей
                                                        // создаём  динамический одномерный массив - это будет
                                                        // каждая строка, которую будем заполнять. 
                                                        // Т.к таких динамических одномерных массивов
                                                        // будет n штук. столько же сколько и строк
    for(int i = 0; i < n; i++)
        for(int k = 0; k < m; k++)
            scanf("%d", &A[i][k]);

    for(int k = 0; k < m; k++)                          // вывод массива, повернутого на 90 градусов
    {
   
        for(int i = (n - 1); i >= 0; i--)
            printf("%d ", A[i][k]);
        printf("\n");
    }
    for(int i = 0; i < n; i++)   // освобождение памяти, выделенной под двумерный массив.
        free(A[i]);              // пробегаемся по каждому указателю, для которого выделили память
    free(A);                     // отметим серьезный недостаток: слишком много malloc() и free()
    return 0;
}
//10, 9 Задачи. Работа со структурами. Передача структуры в функцию.
#include <stdio.h>

struct A       // создаём структуру типа А
{
    int a;
    char c;

};
void func(struct A *x)
{
    int d = x->a;
    d++;
    printf("%d", d);

}
int main()
{

    struct A XY;          // создаем элемент ХУ типа структуры А 
    XY.a = 4;             // присваиваем элементу XY целое значение. Любая структура типа А имеет две части: интовскую и чаровскую. Различаем их с помощью точки
    func(&XY);           

    return 0;
}

//Можно было объявить структуру XY глобально, сделав код чуть короче.
#include <stdio.h>

struct A
{
    int a;
    char c;

}XY; // объявляем структуру глобально, в ф-ии main() объявлять уже не нужно

void func(struct A *x)
{
    int d = x->a;
    d++;
    printf("%d", d);

}

int main()
{
    XY.a = 4;
    func(&XY);
    return 0;
}

//11 задача. Массив структур. Вывод адреса элементов поля а. Вывод значений и размера всех элементов.
#include <stdio.h>
#include <string.h>
struct A
{
    int a;
    char c;
    double d;
};

int main()
{
    struct A XY[5];
    for(int i = 0; i < 5; i++)
    {
        XY[i].a = i + 1;
        printf("%d", XY[i].a);
    }

    XY[0].c = 'M';
    XY[1].c = 'I';
    XY[2].c = 'P';
    XY[3].c = 'T';
    XY[4].c = '!';
    for(int i = 0; i < 5; i++)
        XY[i].d = 20.21;
    int i = 0;
    for(i; i < 5; i++)
        printf("%c", XY[i].c);

    for(i = 0; i < 5; i++)            // вывод адресов всех элементов массива структур
        printf("%lg ", XY[i].d);
    printf("\nАдрес всех элементов в поле а\n");
    for(i = 0; i < 5; i++)
        printf("%p ", &XY[i].a);
    printf("\nРазмер всех элементов\n");

    printf("поле а ");
    for(i = 0; i < 5; i++)
        printf("%ld ", sizeof(XY[i].a));
    printf("\nполе с ");

    for(i = 0; i < 5; i++)
        printf("%ld ", sizeof(XY[i].c));
    printf("\nполе d ");

    for(i = 0; i < 5; i++)
        printf("%ld ", sizeof(XY[i].d));
    printf("\n");


    return 0;
}



